#lang racket
(require 2htdp/image
         2htdp/universe
         lang/posn
         struct-update)

(define screen-height 500)
(define screen-width 500)
(define scene1 (empty-scene screen-width screen-height))

(struct point [x y] #:transparent)
(struct actor [position sprite size] #:transparent)
(struct world [actor scene] #:transparent)

(define-struct-updaters world)
(define-struct-updaters actor)
(define-struct-updaters point)

(define player
  (actor
   [point 250 250]
   [square 50 'solid 'red]
   50))

(define world1
  (world player scene1))
  
(define (get-actor-x state)
  (point-x (actor-position (world-actor state))))

(define (get-actor-y state)
  (point-y (actor-position (world-actor state))))

(define (get-actor-sprite state)
  (actor-sprite (world-actor state)))

(define (get-actor-size state)
  (actor-size (world-actor state)))


(define (key-handler state a-key)
  (let ([speed 10.0])
    (cond
      [(and (key=? a-key "left")
            ;; Check if in bounds
            (>
             (- (get-actor-x state)
                (/ (get-actor-size state) 2)) 0))
       (world-actor-set state
                        (actor-position-set (world-actor state)
                                            (point (- (get-actor-x state) speed) (get-actor-y state))))]
      [(and (key=? a-key "right")
            (<
             (+ (get-actor-x state)
                (/ (get-actor-size state) 2)) screen-width))
       (world-actor-set state
                        (actor-position-set (world-actor state)
                                            (point (+ (get-actor-x state) speed) (get-actor-y state))))]
      [(and (key=? a-key "up")
            (>
             (- (get-actor-y state)
                (/ (get-actor-size state)) 2)) 0)
       (world-actor-set state
                        (actor-position-set (world-actor state)
                                            (point (get-actor-x state) (- (get-actor-y state) speed))))]
      [(and (key=? a-key "down")
            (<
             (+ (get-actor-y state)
                (/ (get-actor-size state)) 2)) screen-height)
       (world-actor-set state
                        (actor-position-set (world-actor state)
                                            (point (get-actor-x state) (+ speed (get-actor-y state)))))]                       
      [#t state])))


       
(define (draw state)
  (place-images
   (list
    (actor-sprite (world-actor state))
    (text "test" 20 'black))
   (list
    (make-posn
     (get-actor-x state)
     (get-actor-y state))
    (make-posn 450 50))
   (world-scene state)))

(define (update state)
  state)

(big-bang world1
  (on-tick update)
  (to-draw draw)
  (on-key key-handler))
#lang racket
(require 2htdp/image
         2htdp/universe
         lang/posn)

;; constants
(define width 500)
(define height 500)

(define scene1 (empty-scene width height))

;; Point class is simply x y
(define point%
  (class object%
    (init-field x y)
    (define/public (get-x)
      x)
    (define/public (get-y)
      y)
    (super-new)))

(define game-piece%
  (class object%
    (init-field
     [position (send this get-position)]
     [sprite (send this get-sprite)]
     [size (send this get-size)])
    (define/public (get-position)
      position)
    (define/public (get-size)
      size)
    (define/public (get-pos-x)
      (send position get-x))
    (define/public (get-pos-y)
      (send position get-y))
    (define/public (get-size-x)
      (send size get-x))
    (define/public (get-size-y)
      (send size get-y))
    (define/public (get-sprite)
      sprite)
    (super-new)))

(define actor%
  (class game-piece%
    (super-new)))

(define tile%
  (class game-piece%
    (super-new)))

(define world%
  (class object%
    (init-field
     time
     [player (send this get-player)]
     [scene (send this get-scene)])
    (define/public (get-player)
      player)
    (define/public (get-player-position)
      (send player get-position))
    (define/public (get-player-size)
      (send player get-size))
    (define/public (get-player-sprite)
      (send player get-sprite))
    (define/public (get-scene)
      scene)
    (define/public (get-player-x)
      (send player get-pos-x))
    (define/public (get-player-y)
      (send player get-pos-y))
    (define/public (get-player-size-x)
      (send player get-size-x))
    (define/public (get-player-size-y)
      (send player get-size-y))
    (define/public (get-time)
      time)
    (define/public (draw)
      ;; Handle all of the graphical representation of the state
      (place-images
       (list (send player get-sprite)
             (text (~a (round (send this get-time))) 20 'black))
       (list
        (make-posn (send player get-pos-x)
                   (send player get-pos-y))
        (make-posn 450 50))
       scene))
    (super-new)))
     
(define player
  (new actor%
       [position (new point% [x 250] [y 250])]
       [sprite (square 50 'solid 'red)]
       [size (new point% [x 50] [y 50])]))


(define world1 (new world%
                    [player player]
                    [scene scene1]
                    [time 60]))


;; Main
(define (draw state)
  (send state draw))

(define (update state)
  (new world%
       [player (new actor%
                    [position (send state get-player-position)]
                    [sprite (send state get-player-sprite)]
                    [size (send state get-player-size)])]
       [scene scene1]
       [time (- (send state get-time) 0.03)]))

(big-bang world1
  (to-draw draw)
  (on-tick update))

#|
;; The key handler, takes the state of the program and a key and
;; returns new state
(define (key-handler state a-key)
  (let ([speed 10.0])
    (cond
      [(and (key=? a-key "left")
            ;; Check if in bounds
            (> (point-x (first state)) 0)
            ) 
       (list (point [- (point-x (first state)) speed]
                    [point-y (first state)])
             (second state))]
      [(and (key=? a-key "right")
            (< (point-x (first state)) 500)
            )
       (list (point [+ (point-x (first state)) speed]
                    [point-y (first state)])
             (second state))]
      [(and (key=? a-key "up")
            (> (point-x (first state)) 0)
            )
       (list (point [point-x (first state)]
                    [- (point-y (first state)) speed])
             (second state))]
      [(and (key=? a-key "down")
            (< (point-y (first state)) 500)
            )
       (list (point [point-x (first state)]
                    [+ (point-y (first state)) speed])
             (second state))]))) |#